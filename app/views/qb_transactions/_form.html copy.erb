<%= partial 'application/form', o: @obj %>
<script>

	var obj_form = $('#obj_form');

	obj_form.on('change', '.obj_type input', function() {		
		$('#division_type_head').addClass('busy-bg');
		$.ajax({
			url: '<%= url_for action: :fields %>',
			data: $('#obj_division input, .obj_type input, #obj_date, #obj_num, #obj_qb_customer_id').serialize(),
			complete: function(xhr, status) {
				$('#division_type_head').removeClass('busy-bg');
			},
			success: function(data, status, xhr) {
				obj_form.html($(data).html());
				input_setup(obj_form);
				init_obj_form();
			},
			error: function(xhr, status, error) {
				alert('Error loading form.');
			}
		});
	});	

	function init_obj_form() {
				
		var type = <% if o.new_record? %>$('#obj_type input:checked').val()<% else %><%= raw o.type.to_json %><% end %>;

		if(type == 'Refund') {
		
			var calculate_refund_items_fields = function() {
				var total = 0;
				$('#refunds tr').each(function(i, row) {
					row = $(row);
					var refunding = row.find('.d_refunding')[0].checked;
					var amt = row.find('.d_amount');
					var amount = float(amt.val());
					if(refunding) {
						total += amount;
					}
					amt.html(n2(amount));
				});
				$('#obj_new_amount').val(total);
				$('#new_amount').html(n2(total));
			}
			
			var init_refunds_tbody = function() {
				$('#refunds input').change(function(e) {
					calculate_refund_items_fields();
				});
			}
			init_refunds_tbody();
			
			init_select2({
				select: '#obj_previous_id', 
				url: '<%= url_for action: :autocomplete %>',
				params: function(params) {
					params.type = ['Payment']
				},
				item: function(item) {
					item.text = item.type + ' #' + item.num + ' ' + item.qb_customer_full_path;
				}
			});
			$('#obj_previous_id').change(function(e) {
				var data = $(this).select2('data');
				$('#refunds-thead').addClass('busy-bg');
				$.ajax({
					url: '<%= url_for action: :refund_items_fields, id: o.id %>',
					data: $('#obj_previous_id, #refunds :input').serialize(),
					success: function(data, status, xhr) {
						$('#refunds').html(data);
						init_refunds_tbody();
					},
					error: function(xhr, status, error) {
						alert('Error fetching data');
					},
					complete: function(xhr, status) {
						$('#refunds-thead').removeClass('busy-bg');
					}
				});
			});
		}
		
		if(type == 'Invoice') {		
			var toggle_doc_checks = function() {
				var generate = $('#obj_doc_generate').prop('checked');
				$('#doc_existing_overwrite').toggle(generate);
				var overwrite = $('#obj_doc_existing_overwrite').prop('checked');
				$('#doc_deliver').toggle(generate && !overwrite);
			}
			toggle_doc_checks();
			$('#obj_doc_generate').change(toggle_doc_checks);
			$('#obj_doc_existing_overwrite').change(toggle_doc_checks);
		}
		
		if(type == 'Payment' || type == 'Refund' || type == 'Sales Receipt' || type == 'AR Refund') {
			var method_checks = $('#obj_pay_method input');
			var cc_option_checks = $('#obj_cc_option input');
			var toggle_method = function() {
				var val = method_checks.filter(':checked').val();
				$('.method-check, .method-cc, .cc-prev, .cc-new').hide().find(':input').prop('disabled', true);
				if(val == 'Check') {
					$('.method-check').show().find(':input').prop('disabled', false);
				}
				else if(val == 'CC') {
					$('.method-cc').show().find(':input').prop('disabled', false);
					var cc_opt = cc_option_checks.filter(':checked').data('cc');
					if(cc_opt) {
						$('.cc-' + cc_opt).show().find(':input').prop('disabled', false);
					}
				}
			}
			cc_option_checks.change(toggle_method);
			method_checks.change(toggle_method);
			toggle_method();	
			init_select2({
				select: '#obj_cc_previous_id',
				url: '<%= url_for action: :autocomplete %>',
				params: function(params) {
					params.qb_customer_id = $('#obj_qb_customer_id').val();
					params.payeezy = 1
				},
				item: function(item) {
					item.text = item.type + ' #' + item.num + ', $' + n2_float(item.amount) + ' Card Ending In: ' + item.cc_last4;
				}
			});
		}
		
		if(type) {
			init_path_select2({
				select: '#obj_qb_account_id', 
				url: '<%= url_for context: nil, context_id: nil, controller: :qb_accounts, action: :autocomplete %>', 
				params: function(params) {
					params.division = $('#obj_division input:checked').val();
					if(type == 'Invoice') {
						params.type = 'Accounts Receivable';
					}
					if(type == 'Sales Receipt' || type == 'Payment') {
						params.type = 'Other Current Asset';
					}
				}
			});
						
			init_path_select2({
				select: '#obj_qb_customer_id',
				url: '<%= url_for context: nil, context_id: nil, controller: :qb_customers, action: :autocomplete %>',
				params: function(params) {
					params.division = $('#obj_division input:checked').val();
				}
			});
		}
		
		if(type == 'Payment' || type == 'AR Refund') {
		
			init_path_select2({
				select: '#obj_qb_account2_id', 
				url: '<%= url_for context: nil, context_id: nil, controller: :qb_accounts, action: :autocomplete %>', 
				params: function(params) {
					params.division = $('#obj_division input:checked').val();
					params.type = 'Accounts Receivable';
				}
			});		
		
			$('#obj_qb_customer_id').change(function(e) {
				$('#unpaid-thead').addClass('busy-bg');
				$.ajax({
					url: '<%= url_for action: :payment_for_ids_fields, id: o.id %>',
					data: $('#obj_qb_customer_id, #unpaid :input').serialize(),
					success: function(data, status, xhr) {
						$('#unpaid').html(data);
					},
					error: function(xhr, status, error) {
						alert('Error fetching data');
					},
					complete: function(xhr, status) {
						$('#unpaid-thead').removeClass('busy-bg');
					}
				});
			});
			// Possible bug where changing the price while loading a customers payment items may screw things up. 
			// Change customer then quickly change invoice... would have to be fast though.
	
			var amount_input = $('#obj_amount');
			var calculate_split = function() {
				var total = float(amount_input.val());
				var has_items = false;
				var pay_ref_switch = (type == 'Payment' ? 1 : -1);
				$('#unpaid input[type="checkbox"]:checked').each(function(i, check) {
					has_items = true;
					check = $(check);
					var t = check.data('type');
					var a = float(check.data('amount'));
					total += (t == 'Payment' ? 1 : -1) * a * pay_ref_switch;
				});
				$('#obj_split_amount').val(!has_items || total == 0 ? '' : n2(total));
				// total < 0 ? error.
			}
			var auto_select_items = function() {
				var total = float(amount_input.val());
				var checks = $('#unpaid input[type="checkbox"]');
				checks.prop('checked', false);
				// Find stuff that should always be checked
				var pay_ref_switch = (type == 'Payment' ? 1 : -1);
				checks.each(function(id, check) {
					check = $(check);
					var t = check.data('type');
					var a = float(check.data('amount'));
					var amt = (t == 'Payment' ? 1 : -1) * a * pay_ref_switch;
					if(amt > 0) {
						total += amt;
						check.prop('checked', true);
					}
				});
				// Check what is left
				checks.not(':checked').each(function(id, check) {
					check = $(check);
					var t = check.data('type');
					var a = float(check.data('amount'));
					total -= a;
					if(total < 0) {
						return false;
					}
					check.prop('checked', true);
				});
				calculate_split();
			}
			$('#obj_amount').change(auto_select_items);
			$('#unpaid').on('change', 'input[type="checkbox"]', calculate_split);
		}
 	}
 	init_obj_form();
</script>