<div id="grid" style="margin: 0 8px;"></div>
<script>

var cols = <%= @cols.to_json.html_safe %>;
var data = <%= @data.to_json.html_safe %>;

var handleAfterChange = function(changes, source) {
	if(source == 'loadData' || source == 'internal') {
		return;
	}
	var data = {}
	var changes_map = {};
	var has_change = false;
	for(var i = 0; i < changes.length; i++) {
		var change = changes[i];
		var old_val = change[2];
		var val = change[3];
		if(old_val != val) {
			has_change = true;
			var vis_row = change[0];
			var col = change[1];
			var field = cols[col].name;
			var id = hot.getDataAtCell(vis_row, hot.toVisualColumn(0));
			data[id] = data[id] || {};
			data[id][field] = val;
			$(hot.getCell(vis_row, hot.toVisualColumn(col))).addClass('busy-bg');
			changes_map[id] = changes_map[id] || [];
			changes_map[id].push([hot.toPhysicalRow(vis_row), col, change[2], change[3]]);
		}
	}
	if(!has_change) {
		return;
	}
	$.ajax({
		url: <%= url_for(action: :multiedit).to_json.html_safe %>,
		data: {objs: data},
		method: 'POST',
		success: function(data, status, xhr) {
			errors = '';
			$.each(data, function(id, obj) {
				if(obj.errors) {
					errors += 'Couldn\'t save record with ID ' + id + '!\n'
					for(var i = 0; i < obj.errors.length; i++) {
						errors += ' - ' + obj.errors[i] + '\n';
					}
					for(var i = 0; i < changes_map[id].length; i++) {
						var change = changes_map[id][i];
						hot.setDataAtCell(hot.toVisualRow(change[0]), hot.toVisualRow(change[1]), change[2], 'internal');
					}
				}
			});
			if(errors) {
				alert(errors);
			}
		},
		error: function(xhr, status, error) {
			alert('Error saving data!');
		},
		complete: function(xhr, status) {
			$.each(changes_map, function(id, changes) {
				for(var i = 0; i < changes.length; i++) {
					var change = changes[i];
					$(hot.getCell(hot.toVisualRow(change[0]), hot.toVisualColumn(change[1]))).removeClass('busy-bg').effect('highlight');
				}
			});
		}
	});
}

var select_all_checked = false;
var select_data = {}
for(var i = 0; i < data.length; i++) {
	select_data[data[i][0]] = false;
}

function set_list_ids() {
	vals = [];
	$.each(select_data, function(k, v) {
		if(v) vals.push(k)
	});
	$('#list_ids').val(vals.join(','));
}

function select_all_check(c, e) {
	var val = c.checked;
	e.stopImmediatePropagation();
	e.preventDefault();
	setTimeout(function() { 
		c.checked = val; 
		select_all_checked = val;
		$('input.grid_select').prop('checked', val);
		$.each(select_data, function(k, v) {
			select_data[k] = val;
		});
		set_list_ids();
	}, 10);
}

function select_check(c, e, id) {
	var val = c.checked;
	e.stopImmediatePropagation();
	e.preventDefault();
	setTimeout(function() { 
		c.checked = val;
		select_data[id] = val;
		set_list_ids(); 
	}, 10);
}

cols[0].renderer = function(instance, td, row, col, prop, value, cellProperties) {
	td.innerHTML = '<div class="nobr"><input type="checkbox" class="grid_select"' + (select_data[value] ? ' checked="checked"' : '') + ' onclick="select_check(this, event, ' + value + ');">&nbsp;' +
		'<a href="<%= url_for action: :view %>/' + value + '"><i class="fa fa-search"></i></a>&nbsp;' + 
		'<a href="<%= url_for action: :edit %>/' + value + '"><i class="fa fa-pencil-square-o"></i></a>&nbsp;' + value + '</div>';
	return td;
}

var hot = new Handsontable($('#grid')[0], {
	data: data,
	rowHeaders: false,
	colHeaders: function(i) {
		if(i == 0) {
			return '<div class="left"><input type="checkbox" data-col="0"' + (select_all_checked ? ' checked="checked"' : '') + ' onclick="select_all_check(this, event);" class="grid_select_all"></div>&nbsp;Actions/ID';
		}
		return cols[i].label;
	},
	columns: cols,
	manualColumnResize: true,
	manualRowResize: false,
	columnSorting: true,
	sortIndicator: true,
	manualColumnMove: true,
	afterChange: handleAfterChange,
	maxRows: <%= @objs.size %>,
	currentRowClassName: 'currentRow',
	currentColClassName: 'currentCol',
});
	
</script>